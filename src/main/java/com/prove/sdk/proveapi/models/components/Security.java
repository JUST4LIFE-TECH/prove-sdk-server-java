/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.prove.sdk.proveapi.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.core.type.TypeReference;
import com.prove.sdk.proveapi.utils.SpeakeasyMetadata;
import com.prove.sdk.proveapi.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;

public class Security {

    @SpeakeasyMetadata("security:scheme=true,type=oauth2,name=Authorization")
    private Optional<? extends String> auth;

    @JsonCreator
    public Security(
            Optional<? extends String> auth) {
        Utils.checkNotNull(auth, "auth");
        this.auth = auth;
    }
    
    public Security() {
        this(Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> auth() {
        return (Optional<String>) auth;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public Security withAuth(String auth) {
        Utils.checkNotNull(auth, "auth");
        this.auth = Optional.ofNullable(auth);
        return this;
    }

    public Security withAuth(Optional<? extends String> auth) {
        Utils.checkNotNull(auth, "auth");
        this.auth = auth;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Security other = (Security) o;
        return 
            java.util.Objects.deepEquals(this.auth, other.auth);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            auth);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Security.class,
                "auth", auth);
    }
    
    public final static class Builder {
 
        private Optional<? extends String> auth = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder auth(String auth) {
            Utils.checkNotNull(auth, "auth");
            this.auth = Optional.ofNullable(auth);
            return this;
        }

        public Builder auth(Optional<? extends String> auth) {
            Utils.checkNotNull(auth, "auth");
            this.auth = auth;
            return this;
        }
        
        public Security build() {
            return new Security(
                auth);
        }
    }
}

