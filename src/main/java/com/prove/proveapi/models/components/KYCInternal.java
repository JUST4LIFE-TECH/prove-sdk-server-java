/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.prove.proveapi.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.prove.proveapi.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;

public class KYCInternal {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("adverseMediaList")
    private Optional<? extends java.util.List<AdverseMediaResponseInternal>> adverseMediaList;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("aliasList")
    private Optional<? extends java.util.List<String>> aliasList;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("amlTypeLists")
    private Optional<? extends java.util.List<AmlTypeListResponseInternal>> amlTypeLists;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("totalHits")
    private Optional<? extends Long> totalHits;

    @JsonCreator
    public KYCInternal(
            @JsonProperty("adverseMediaList") Optional<? extends java.util.List<AdverseMediaResponseInternal>> adverseMediaList,
            @JsonProperty("aliasList") Optional<? extends java.util.List<String>> aliasList,
            @JsonProperty("amlTypeLists") Optional<? extends java.util.List<AmlTypeListResponseInternal>> amlTypeLists,
            @JsonProperty("totalHits") Optional<? extends Long> totalHits) {
        Utils.checkNotNull(adverseMediaList, "adverseMediaList");
        Utils.checkNotNull(aliasList, "aliasList");
        Utils.checkNotNull(amlTypeLists, "amlTypeLists");
        Utils.checkNotNull(totalHits, "totalHits");
        this.adverseMediaList = adverseMediaList;
        this.aliasList = aliasList;
        this.amlTypeLists = amlTypeLists;
        this.totalHits = totalHits;
    }
    
    public KYCInternal() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<java.util.List<AdverseMediaResponseInternal>> adverseMediaList() {
        return (Optional<java.util.List<AdverseMediaResponseInternal>>) adverseMediaList;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<java.util.List<String>> aliasList() {
        return (Optional<java.util.List<String>>) aliasList;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<java.util.List<AmlTypeListResponseInternal>> amlTypeLists() {
        return (Optional<java.util.List<AmlTypeListResponseInternal>>) amlTypeLists;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Long> totalHits() {
        return (Optional<Long>) totalHits;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public KYCInternal withAdverseMediaList(java.util.List<AdverseMediaResponseInternal> adverseMediaList) {
        Utils.checkNotNull(adverseMediaList, "adverseMediaList");
        this.adverseMediaList = Optional.ofNullable(adverseMediaList);
        return this;
    }

    public KYCInternal withAdverseMediaList(Optional<? extends java.util.List<AdverseMediaResponseInternal>> adverseMediaList) {
        Utils.checkNotNull(adverseMediaList, "adverseMediaList");
        this.adverseMediaList = adverseMediaList;
        return this;
    }

    public KYCInternal withAliasList(java.util.List<String> aliasList) {
        Utils.checkNotNull(aliasList, "aliasList");
        this.aliasList = Optional.ofNullable(aliasList);
        return this;
    }

    public KYCInternal withAliasList(Optional<? extends java.util.List<String>> aliasList) {
        Utils.checkNotNull(aliasList, "aliasList");
        this.aliasList = aliasList;
        return this;
    }

    public KYCInternal withAmlTypeLists(java.util.List<AmlTypeListResponseInternal> amlTypeLists) {
        Utils.checkNotNull(amlTypeLists, "amlTypeLists");
        this.amlTypeLists = Optional.ofNullable(amlTypeLists);
        return this;
    }

    public KYCInternal withAmlTypeLists(Optional<? extends java.util.List<AmlTypeListResponseInternal>> amlTypeLists) {
        Utils.checkNotNull(amlTypeLists, "amlTypeLists");
        this.amlTypeLists = amlTypeLists;
        return this;
    }

    public KYCInternal withTotalHits(long totalHits) {
        Utils.checkNotNull(totalHits, "totalHits");
        this.totalHits = Optional.ofNullable(totalHits);
        return this;
    }

    public KYCInternal withTotalHits(Optional<? extends Long> totalHits) {
        Utils.checkNotNull(totalHits, "totalHits");
        this.totalHits = totalHits;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        KYCInternal other = (KYCInternal) o;
        return 
            java.util.Objects.deepEquals(this.adverseMediaList, other.adverseMediaList) &&
            java.util.Objects.deepEquals(this.aliasList, other.aliasList) &&
            java.util.Objects.deepEquals(this.amlTypeLists, other.amlTypeLists) &&
            java.util.Objects.deepEquals(this.totalHits, other.totalHits);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            adverseMediaList,
            aliasList,
            amlTypeLists,
            totalHits);
    }
    
    @Override
    public String toString() {
        return Utils.toString(KYCInternal.class,
                "adverseMediaList", adverseMediaList,
                "aliasList", aliasList,
                "amlTypeLists", amlTypeLists,
                "totalHits", totalHits);
    }
    
    public final static class Builder {
 
        private Optional<? extends java.util.List<AdverseMediaResponseInternal>> adverseMediaList = Optional.empty();
 
        private Optional<? extends java.util.List<String>> aliasList = Optional.empty();
 
        private Optional<? extends java.util.List<AmlTypeListResponseInternal>> amlTypeLists = Optional.empty();
 
        private Optional<? extends Long> totalHits = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder adverseMediaList(java.util.List<AdverseMediaResponseInternal> adverseMediaList) {
            Utils.checkNotNull(adverseMediaList, "adverseMediaList");
            this.adverseMediaList = Optional.ofNullable(adverseMediaList);
            return this;
        }

        public Builder adverseMediaList(Optional<? extends java.util.List<AdverseMediaResponseInternal>> adverseMediaList) {
            Utils.checkNotNull(adverseMediaList, "adverseMediaList");
            this.adverseMediaList = adverseMediaList;
            return this;
        }

        public Builder aliasList(java.util.List<String> aliasList) {
            Utils.checkNotNull(aliasList, "aliasList");
            this.aliasList = Optional.ofNullable(aliasList);
            return this;
        }

        public Builder aliasList(Optional<? extends java.util.List<String>> aliasList) {
            Utils.checkNotNull(aliasList, "aliasList");
            this.aliasList = aliasList;
            return this;
        }

        public Builder amlTypeLists(java.util.List<AmlTypeListResponseInternal> amlTypeLists) {
            Utils.checkNotNull(amlTypeLists, "amlTypeLists");
            this.amlTypeLists = Optional.ofNullable(amlTypeLists);
            return this;
        }

        public Builder amlTypeLists(Optional<? extends java.util.List<AmlTypeListResponseInternal>> amlTypeLists) {
            Utils.checkNotNull(amlTypeLists, "amlTypeLists");
            this.amlTypeLists = amlTypeLists;
            return this;
        }

        public Builder totalHits(long totalHits) {
            Utils.checkNotNull(totalHits, "totalHits");
            this.totalHits = Optional.ofNullable(totalHits);
            return this;
        }

        public Builder totalHits(Optional<? extends Long> totalHits) {
            Utils.checkNotNull(totalHits, "totalHits");
            this.totalHits = totalHits;
            return this;
        }
        
        public KYCInternal build() {
            return new KYCInternal(
                adverseMediaList,
                aliasList,
                amlTypeLists,
                totalHits);
        }
    }
}

