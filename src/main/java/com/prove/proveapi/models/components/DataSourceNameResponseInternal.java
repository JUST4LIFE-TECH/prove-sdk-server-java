/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.prove.proveapi.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.prove.proveapi.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;

public class DataSourceNameResponseInternal {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("firstName")
    private Optional<? extends Long> firstName;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lastName")
    private Optional<? extends Long> lastName;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("nameScore")
    private Optional<? extends Long> nameScore;

    @JsonCreator
    public DataSourceNameResponseInternal(
            @JsonProperty("firstName") Optional<? extends Long> firstName,
            @JsonProperty("lastName") Optional<? extends Long> lastName,
            @JsonProperty("nameScore") Optional<? extends Long> nameScore) {
        Utils.checkNotNull(firstName, "firstName");
        Utils.checkNotNull(lastName, "lastName");
        Utils.checkNotNull(nameScore, "nameScore");
        this.firstName = firstName;
        this.lastName = lastName;
        this.nameScore = nameScore;
    }
    
    public DataSourceNameResponseInternal() {
        this(Optional.empty(), Optional.empty(), Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Long> firstName() {
        return (Optional<Long>) firstName;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Long> lastName() {
        return (Optional<Long>) lastName;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Long> nameScore() {
        return (Optional<Long>) nameScore;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public DataSourceNameResponseInternal withFirstName(long firstName) {
        Utils.checkNotNull(firstName, "firstName");
        this.firstName = Optional.ofNullable(firstName);
        return this;
    }

    public DataSourceNameResponseInternal withFirstName(Optional<? extends Long> firstName) {
        Utils.checkNotNull(firstName, "firstName");
        this.firstName = firstName;
        return this;
    }

    public DataSourceNameResponseInternal withLastName(long lastName) {
        Utils.checkNotNull(lastName, "lastName");
        this.lastName = Optional.ofNullable(lastName);
        return this;
    }

    public DataSourceNameResponseInternal withLastName(Optional<? extends Long> lastName) {
        Utils.checkNotNull(lastName, "lastName");
        this.lastName = lastName;
        return this;
    }

    public DataSourceNameResponseInternal withNameScore(long nameScore) {
        Utils.checkNotNull(nameScore, "nameScore");
        this.nameScore = Optional.ofNullable(nameScore);
        return this;
    }

    public DataSourceNameResponseInternal withNameScore(Optional<? extends Long> nameScore) {
        Utils.checkNotNull(nameScore, "nameScore");
        this.nameScore = nameScore;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DataSourceNameResponseInternal other = (DataSourceNameResponseInternal) o;
        return 
            java.util.Objects.deepEquals(this.firstName, other.firstName) &&
            java.util.Objects.deepEquals(this.lastName, other.lastName) &&
            java.util.Objects.deepEquals(this.nameScore, other.nameScore);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            firstName,
            lastName,
            nameScore);
    }
    
    @Override
    public String toString() {
        return Utils.toString(DataSourceNameResponseInternal.class,
                "firstName", firstName,
                "lastName", lastName,
                "nameScore", nameScore);
    }
    
    public final static class Builder {
 
        private Optional<? extends Long> firstName = Optional.empty();
 
        private Optional<? extends Long> lastName = Optional.empty();
 
        private Optional<? extends Long> nameScore = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder firstName(long firstName) {
            Utils.checkNotNull(firstName, "firstName");
            this.firstName = Optional.ofNullable(firstName);
            return this;
        }

        public Builder firstName(Optional<? extends Long> firstName) {
            Utils.checkNotNull(firstName, "firstName");
            this.firstName = firstName;
            return this;
        }

        public Builder lastName(long lastName) {
            Utils.checkNotNull(lastName, "lastName");
            this.lastName = Optional.ofNullable(lastName);
            return this;
        }

        public Builder lastName(Optional<? extends Long> lastName) {
            Utils.checkNotNull(lastName, "lastName");
            this.lastName = lastName;
            return this;
        }

        public Builder nameScore(long nameScore) {
            Utils.checkNotNull(nameScore, "nameScore");
            this.nameScore = Optional.ofNullable(nameScore);
            return this;
        }

        public Builder nameScore(Optional<? extends Long> nameScore) {
            Utils.checkNotNull(nameScore, "nameScore");
            this.nameScore = nameScore;
            return this;
        }
        
        public DataSourceNameResponseInternal build() {
            return new DataSourceNameResponseInternal(
                firstName,
                lastName,
                nameScore);
        }
    }
}

