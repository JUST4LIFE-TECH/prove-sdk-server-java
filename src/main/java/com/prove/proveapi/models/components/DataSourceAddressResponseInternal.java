/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.prove.proveapi.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.prove.proveapi.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;

public class DataSourceAddressResponseInternal {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("addressScore")
    private Optional<? extends Long> addressScore;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("city")
    private Optional<? extends Boolean> city;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("distance")
    private Optional<? extends Double> distance;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("postalCode")
    private Optional<? extends Boolean> postalCode;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("region")
    private Optional<? extends Boolean> region;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("street")
    private Optional<? extends Boolean> street;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("streetNumber")
    private Optional<? extends Long> streetNumber;

    @JsonCreator
    public DataSourceAddressResponseInternal(
            @JsonProperty("addressScore") Optional<? extends Long> addressScore,
            @JsonProperty("city") Optional<? extends Boolean> city,
            @JsonProperty("distance") Optional<? extends Double> distance,
            @JsonProperty("postalCode") Optional<? extends Boolean> postalCode,
            @JsonProperty("region") Optional<? extends Boolean> region,
            @JsonProperty("street") Optional<? extends Boolean> street,
            @JsonProperty("streetNumber") Optional<? extends Long> streetNumber) {
        Utils.checkNotNull(addressScore, "addressScore");
        Utils.checkNotNull(city, "city");
        Utils.checkNotNull(distance, "distance");
        Utils.checkNotNull(postalCode, "postalCode");
        Utils.checkNotNull(region, "region");
        Utils.checkNotNull(street, "street");
        Utils.checkNotNull(streetNumber, "streetNumber");
        this.addressScore = addressScore;
        this.city = city;
        this.distance = distance;
        this.postalCode = postalCode;
        this.region = region;
        this.street = street;
        this.streetNumber = streetNumber;
    }
    
    public DataSourceAddressResponseInternal() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Long> addressScore() {
        return (Optional<Long>) addressScore;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Boolean> city() {
        return (Optional<Boolean>) city;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Double> distance() {
        return (Optional<Double>) distance;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Boolean> postalCode() {
        return (Optional<Boolean>) postalCode;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Boolean> region() {
        return (Optional<Boolean>) region;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Boolean> street() {
        return (Optional<Boolean>) street;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Long> streetNumber() {
        return (Optional<Long>) streetNumber;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public DataSourceAddressResponseInternal withAddressScore(long addressScore) {
        Utils.checkNotNull(addressScore, "addressScore");
        this.addressScore = Optional.ofNullable(addressScore);
        return this;
    }

    public DataSourceAddressResponseInternal withAddressScore(Optional<? extends Long> addressScore) {
        Utils.checkNotNull(addressScore, "addressScore");
        this.addressScore = addressScore;
        return this;
    }

    public DataSourceAddressResponseInternal withCity(boolean city) {
        Utils.checkNotNull(city, "city");
        this.city = Optional.ofNullable(city);
        return this;
    }

    public DataSourceAddressResponseInternal withCity(Optional<? extends Boolean> city) {
        Utils.checkNotNull(city, "city");
        this.city = city;
        return this;
    }

    public DataSourceAddressResponseInternal withDistance(double distance) {
        Utils.checkNotNull(distance, "distance");
        this.distance = Optional.ofNullable(distance);
        return this;
    }

    public DataSourceAddressResponseInternal withDistance(Optional<? extends Double> distance) {
        Utils.checkNotNull(distance, "distance");
        this.distance = distance;
        return this;
    }

    public DataSourceAddressResponseInternal withPostalCode(boolean postalCode) {
        Utils.checkNotNull(postalCode, "postalCode");
        this.postalCode = Optional.ofNullable(postalCode);
        return this;
    }

    public DataSourceAddressResponseInternal withPostalCode(Optional<? extends Boolean> postalCode) {
        Utils.checkNotNull(postalCode, "postalCode");
        this.postalCode = postalCode;
        return this;
    }

    public DataSourceAddressResponseInternal withRegion(boolean region) {
        Utils.checkNotNull(region, "region");
        this.region = Optional.ofNullable(region);
        return this;
    }

    public DataSourceAddressResponseInternal withRegion(Optional<? extends Boolean> region) {
        Utils.checkNotNull(region, "region");
        this.region = region;
        return this;
    }

    public DataSourceAddressResponseInternal withStreet(boolean street) {
        Utils.checkNotNull(street, "street");
        this.street = Optional.ofNullable(street);
        return this;
    }

    public DataSourceAddressResponseInternal withStreet(Optional<? extends Boolean> street) {
        Utils.checkNotNull(street, "street");
        this.street = street;
        return this;
    }

    public DataSourceAddressResponseInternal withStreetNumber(long streetNumber) {
        Utils.checkNotNull(streetNumber, "streetNumber");
        this.streetNumber = Optional.ofNullable(streetNumber);
        return this;
    }

    public DataSourceAddressResponseInternal withStreetNumber(Optional<? extends Long> streetNumber) {
        Utils.checkNotNull(streetNumber, "streetNumber");
        this.streetNumber = streetNumber;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DataSourceAddressResponseInternal other = (DataSourceAddressResponseInternal) o;
        return 
            java.util.Objects.deepEquals(this.addressScore, other.addressScore) &&
            java.util.Objects.deepEquals(this.city, other.city) &&
            java.util.Objects.deepEquals(this.distance, other.distance) &&
            java.util.Objects.deepEquals(this.postalCode, other.postalCode) &&
            java.util.Objects.deepEquals(this.region, other.region) &&
            java.util.Objects.deepEquals(this.street, other.street) &&
            java.util.Objects.deepEquals(this.streetNumber, other.streetNumber);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            addressScore,
            city,
            distance,
            postalCode,
            region,
            street,
            streetNumber);
    }
    
    @Override
    public String toString() {
        return Utils.toString(DataSourceAddressResponseInternal.class,
                "addressScore", addressScore,
                "city", city,
                "distance", distance,
                "postalCode", postalCode,
                "region", region,
                "street", street,
                "streetNumber", streetNumber);
    }
    
    public final static class Builder {
 
        private Optional<? extends Long> addressScore = Optional.empty();
 
        private Optional<? extends Boolean> city = Optional.empty();
 
        private Optional<? extends Double> distance = Optional.empty();
 
        private Optional<? extends Boolean> postalCode = Optional.empty();
 
        private Optional<? extends Boolean> region = Optional.empty();
 
        private Optional<? extends Boolean> street = Optional.empty();
 
        private Optional<? extends Long> streetNumber = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder addressScore(long addressScore) {
            Utils.checkNotNull(addressScore, "addressScore");
            this.addressScore = Optional.ofNullable(addressScore);
            return this;
        }

        public Builder addressScore(Optional<? extends Long> addressScore) {
            Utils.checkNotNull(addressScore, "addressScore");
            this.addressScore = addressScore;
            return this;
        }

        public Builder city(boolean city) {
            Utils.checkNotNull(city, "city");
            this.city = Optional.ofNullable(city);
            return this;
        }

        public Builder city(Optional<? extends Boolean> city) {
            Utils.checkNotNull(city, "city");
            this.city = city;
            return this;
        }

        public Builder distance(double distance) {
            Utils.checkNotNull(distance, "distance");
            this.distance = Optional.ofNullable(distance);
            return this;
        }

        public Builder distance(Optional<? extends Double> distance) {
            Utils.checkNotNull(distance, "distance");
            this.distance = distance;
            return this;
        }

        public Builder postalCode(boolean postalCode) {
            Utils.checkNotNull(postalCode, "postalCode");
            this.postalCode = Optional.ofNullable(postalCode);
            return this;
        }

        public Builder postalCode(Optional<? extends Boolean> postalCode) {
            Utils.checkNotNull(postalCode, "postalCode");
            this.postalCode = postalCode;
            return this;
        }

        public Builder region(boolean region) {
            Utils.checkNotNull(region, "region");
            this.region = Optional.ofNullable(region);
            return this;
        }

        public Builder region(Optional<? extends Boolean> region) {
            Utils.checkNotNull(region, "region");
            this.region = region;
            return this;
        }

        public Builder street(boolean street) {
            Utils.checkNotNull(street, "street");
            this.street = Optional.ofNullable(street);
            return this;
        }

        public Builder street(Optional<? extends Boolean> street) {
            Utils.checkNotNull(street, "street");
            this.street = street;
            return this;
        }

        public Builder streetNumber(long streetNumber) {
            Utils.checkNotNull(streetNumber, "streetNumber");
            this.streetNumber = Optional.ofNullable(streetNumber);
            return this;
        }

        public Builder streetNumber(Optional<? extends Long> streetNumber) {
            Utils.checkNotNull(streetNumber, "streetNumber");
            this.streetNumber = streetNumber;
            return this;
        }
        
        public DataSourceAddressResponseInternal build() {
            return new DataSourceAddressResponseInternal(
                addressScore,
                city,
                distance,
                postalCode,
                region,
                street,
                streetNumber);
        }
    }
}

