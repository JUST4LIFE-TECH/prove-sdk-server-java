/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.prove.proveapi.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.prove.proveapi.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;

public class AmlTypeListResponse {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("AmlType")
    private Optional<? extends String> amlType;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Fields")
    private Optional<? extends java.util.List<FieldTypeResponse>> fields;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ListHits")
    private Optional<? extends Long> listHits;

    @JsonCreator
    public AmlTypeListResponse(
            @JsonProperty("AmlType") Optional<? extends String> amlType,
            @JsonProperty("Fields") Optional<? extends java.util.List<FieldTypeResponse>> fields,
            @JsonProperty("ListHits") Optional<? extends Long> listHits) {
        Utils.checkNotNull(amlType, "amlType");
        Utils.checkNotNull(fields, "fields");
        Utils.checkNotNull(listHits, "listHits");
        this.amlType = amlType;
        this.fields = fields;
        this.listHits = listHits;
    }
    
    public AmlTypeListResponse() {
        this(Optional.empty(), Optional.empty(), Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> amlType() {
        return (Optional<String>) amlType;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<java.util.List<FieldTypeResponse>> fields() {
        return (Optional<java.util.List<FieldTypeResponse>>) fields;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Long> listHits() {
        return (Optional<Long>) listHits;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public AmlTypeListResponse withAmlType(String amlType) {
        Utils.checkNotNull(amlType, "amlType");
        this.amlType = Optional.ofNullable(amlType);
        return this;
    }

    public AmlTypeListResponse withAmlType(Optional<? extends String> amlType) {
        Utils.checkNotNull(amlType, "amlType");
        this.amlType = amlType;
        return this;
    }

    public AmlTypeListResponse withFields(java.util.List<FieldTypeResponse> fields) {
        Utils.checkNotNull(fields, "fields");
        this.fields = Optional.ofNullable(fields);
        return this;
    }

    public AmlTypeListResponse withFields(Optional<? extends java.util.List<FieldTypeResponse>> fields) {
        Utils.checkNotNull(fields, "fields");
        this.fields = fields;
        return this;
    }

    public AmlTypeListResponse withListHits(long listHits) {
        Utils.checkNotNull(listHits, "listHits");
        this.listHits = Optional.ofNullable(listHits);
        return this;
    }

    public AmlTypeListResponse withListHits(Optional<? extends Long> listHits) {
        Utils.checkNotNull(listHits, "listHits");
        this.listHits = listHits;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AmlTypeListResponse other = (AmlTypeListResponse) o;
        return 
            java.util.Objects.deepEquals(this.amlType, other.amlType) &&
            java.util.Objects.deepEquals(this.fields, other.fields) &&
            java.util.Objects.deepEquals(this.listHits, other.listHits);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            amlType,
            fields,
            listHits);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AmlTypeListResponse.class,
                "amlType", amlType,
                "fields", fields,
                "listHits", listHits);
    }
    
    public final static class Builder {
 
        private Optional<? extends String> amlType = Optional.empty();
 
        private Optional<? extends java.util.List<FieldTypeResponse>> fields = Optional.empty();
 
        private Optional<? extends Long> listHits = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder amlType(String amlType) {
            Utils.checkNotNull(amlType, "amlType");
            this.amlType = Optional.ofNullable(amlType);
            return this;
        }

        public Builder amlType(Optional<? extends String> amlType) {
            Utils.checkNotNull(amlType, "amlType");
            this.amlType = amlType;
            return this;
        }

        public Builder fields(java.util.List<FieldTypeResponse> fields) {
            Utils.checkNotNull(fields, "fields");
            this.fields = Optional.ofNullable(fields);
            return this;
        }

        public Builder fields(Optional<? extends java.util.List<FieldTypeResponse>> fields) {
            Utils.checkNotNull(fields, "fields");
            this.fields = fields;
            return this;
        }

        public Builder listHits(long listHits) {
            Utils.checkNotNull(listHits, "listHits");
            this.listHits = Optional.ofNullable(listHits);
            return this;
        }

        public Builder listHits(Optional<? extends Long> listHits) {
            Utils.checkNotNull(listHits, "listHits");
            this.listHits = listHits;
            return this;
        }
        
        public AmlTypeListResponse build() {
            return new AmlTypeListResponse(
                amlType,
                fields,
                listHits);
        }
    }
}

