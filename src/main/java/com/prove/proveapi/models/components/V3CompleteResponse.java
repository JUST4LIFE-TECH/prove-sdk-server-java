/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.prove.proveapi.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.prove.proveapi.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;

public class V3CompleteResponse {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("idv")
    private Optional<? extends IDVData> idv;

    /**
     * KnowYourCustomerResponse - KYC response
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("kyc")
    private Optional<? extends KnowYourCustomerResponse> kyc;

    /**
     * Next contains the next set of allowed calls in the same flow.
     */
    @JsonProperty("next")
    private java.util.Map<String, String> next;

    /**
     * Success returns true if the individual was verified successfully.
     */
    @JsonProperty("success")
    private boolean success;

    @JsonCreator
    public V3CompleteResponse(
            @JsonProperty("idv") Optional<? extends IDVData> idv,
            @JsonProperty("kyc") Optional<? extends KnowYourCustomerResponse> kyc,
            @JsonProperty("next") java.util.Map<String, String> next,
            @JsonProperty("success") boolean success) {
        Utils.checkNotNull(idv, "idv");
        Utils.checkNotNull(kyc, "kyc");
        next = Utils.emptyMapIfNull(next);
        Utils.checkNotNull(success, "success");
        this.idv = idv;
        this.kyc = kyc;
        this.next = next;
        this.success = success;
    }
    
    public V3CompleteResponse(
            java.util.Map<String, String> next,
            boolean success) {
        this(Optional.empty(), Optional.empty(), next, success);
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<IDVData> idv() {
        return (Optional<IDVData>) idv;
    }

    /**
     * KnowYourCustomerResponse - KYC response
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<KnowYourCustomerResponse> kyc() {
        return (Optional<KnowYourCustomerResponse>) kyc;
    }

    /**
     * Next contains the next set of allowed calls in the same flow.
     */
    @JsonIgnore
    public java.util.Map<String, String> next() {
        return next;
    }

    /**
     * Success returns true if the individual was verified successfully.
     */
    @JsonIgnore
    public boolean success() {
        return success;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public V3CompleteResponse withIdv(IDVData idv) {
        Utils.checkNotNull(idv, "idv");
        this.idv = Optional.ofNullable(idv);
        return this;
    }

    public V3CompleteResponse withIdv(Optional<? extends IDVData> idv) {
        Utils.checkNotNull(idv, "idv");
        this.idv = idv;
        return this;
    }

    /**
     * KnowYourCustomerResponse - KYC response
     */
    public V3CompleteResponse withKyc(KnowYourCustomerResponse kyc) {
        Utils.checkNotNull(kyc, "kyc");
        this.kyc = Optional.ofNullable(kyc);
        return this;
    }

    /**
     * KnowYourCustomerResponse - KYC response
     */
    public V3CompleteResponse withKyc(Optional<? extends KnowYourCustomerResponse> kyc) {
        Utils.checkNotNull(kyc, "kyc");
        this.kyc = kyc;
        return this;
    }

    /**
     * Next contains the next set of allowed calls in the same flow.
     */
    public V3CompleteResponse withNext(java.util.Map<String, String> next) {
        Utils.checkNotNull(next, "next");
        this.next = next;
        return this;
    }

    /**
     * Success returns true if the individual was verified successfully.
     */
    public V3CompleteResponse withSuccess(boolean success) {
        Utils.checkNotNull(success, "success");
        this.success = success;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        V3CompleteResponse other = (V3CompleteResponse) o;
        return 
            java.util.Objects.deepEquals(this.idv, other.idv) &&
            java.util.Objects.deepEquals(this.kyc, other.kyc) &&
            java.util.Objects.deepEquals(this.next, other.next) &&
            java.util.Objects.deepEquals(this.success, other.success);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            idv,
            kyc,
            next,
            success);
    }
    
    @Override
    public String toString() {
        return Utils.toString(V3CompleteResponse.class,
                "idv", idv,
                "kyc", kyc,
                "next", next,
                "success", success);
    }
    
    public final static class Builder {
 
        private Optional<? extends IDVData> idv = Optional.empty();
 
        private Optional<? extends KnowYourCustomerResponse> kyc = Optional.empty();
 
        private java.util.Map<String, String> next;
 
        private Boolean success;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder idv(IDVData idv) {
            Utils.checkNotNull(idv, "idv");
            this.idv = Optional.ofNullable(idv);
            return this;
        }

        public Builder idv(Optional<? extends IDVData> idv) {
            Utils.checkNotNull(idv, "idv");
            this.idv = idv;
            return this;
        }

        /**
         * KnowYourCustomerResponse - KYC response
         */
        public Builder kyc(KnowYourCustomerResponse kyc) {
            Utils.checkNotNull(kyc, "kyc");
            this.kyc = Optional.ofNullable(kyc);
            return this;
        }

        /**
         * KnowYourCustomerResponse - KYC response
         */
        public Builder kyc(Optional<? extends KnowYourCustomerResponse> kyc) {
            Utils.checkNotNull(kyc, "kyc");
            this.kyc = kyc;
            return this;
        }

        /**
         * Next contains the next set of allowed calls in the same flow.
         */
        public Builder next(java.util.Map<String, String> next) {
            Utils.checkNotNull(next, "next");
            this.next = next;
            return this;
        }

        /**
         * Success returns true if the individual was verified successfully.
         */
        public Builder success(boolean success) {
            Utils.checkNotNull(success, "success");
            this.success = success;
            return this;
        }
        
        public V3CompleteResponse build() {
            return new V3CompleteResponse(
                idv,
                kyc,
                next,
                success);
        }
    }
}

