/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.prove.proveapi.proveapi.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.prove.proveapi.proveapi.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;


public class V3ValidateResponse {

    /**
     * Challenge missing returns true if a DOB or SSN needs to be passed in on the next step.
     */
    @JsonProperty("challengeMissing")
    private boolean challengeMissing;

    /**
     * Next contains the next set of allowed calls in the same flow.
     */
    @JsonProperty("next")
    private java.util.Map<String, String> next;

    /**
     * Success returns true if the phone number was validated.
     */
    @JsonProperty("success")
    private boolean success;

    @JsonCreator
    public V3ValidateResponse(
            @JsonProperty("challengeMissing") boolean challengeMissing,
            @JsonProperty("next") java.util.Map<String, String> next,
            @JsonProperty("success") boolean success) {
        Utils.checkNotNull(challengeMissing, "challengeMissing");
        next = Utils.emptyMapIfNull(next);
        Utils.checkNotNull(success, "success");
        this.challengeMissing = challengeMissing;
        this.next = next;
        this.success = success;
    }

    /**
     * Challenge missing returns true if a DOB or SSN needs to be passed in on the next step.
     */
    @JsonIgnore
    public boolean challengeMissing() {
        return challengeMissing;
    }

    /**
     * Next contains the next set of allowed calls in the same flow.
     */
    @JsonIgnore
    public java.util.Map<String, String> next() {
        return next;
    }

    /**
     * Success returns true if the phone number was validated.
     */
    @JsonIgnore
    public boolean success() {
        return success;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Challenge missing returns true if a DOB or SSN needs to be passed in on the next step.
     */
    public V3ValidateResponse withChallengeMissing(boolean challengeMissing) {
        Utils.checkNotNull(challengeMissing, "challengeMissing");
        this.challengeMissing = challengeMissing;
        return this;
    }

    /**
     * Next contains the next set of allowed calls in the same flow.
     */
    public V3ValidateResponse withNext(java.util.Map<String, String> next) {
        Utils.checkNotNull(next, "next");
        this.next = next;
        return this;
    }

    /**
     * Success returns true if the phone number was validated.
     */
    public V3ValidateResponse withSuccess(boolean success) {
        Utils.checkNotNull(success, "success");
        this.success = success;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        V3ValidateResponse other = (V3ValidateResponse) o;
        return 
            java.util.Objects.deepEquals(this.challengeMissing, other.challengeMissing) &&
            java.util.Objects.deepEquals(this.next, other.next) &&
            java.util.Objects.deepEquals(this.success, other.success);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            challengeMissing,
            next,
            success);
    }
    
    @Override
    public String toString() {
        return Utils.toString(V3ValidateResponse.class,
                "challengeMissing", challengeMissing,
                "next", next,
                "success", success);
    }
    
    public final static class Builder {
 
        private Boolean challengeMissing;
 
        private java.util.Map<String, String> next;
 
        private Boolean success;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Challenge missing returns true if a DOB or SSN needs to be passed in on the next step.
         */
        public Builder challengeMissing(boolean challengeMissing) {
            Utils.checkNotNull(challengeMissing, "challengeMissing");
            this.challengeMissing = challengeMissing;
            return this;
        }

        /**
         * Next contains the next set of allowed calls in the same flow.
         */
        public Builder next(java.util.Map<String, String> next) {
            Utils.checkNotNull(next, "next");
            this.next = next;
            return this;
        }

        /**
         * Success returns true if the phone number was validated.
         */
        public Builder success(boolean success) {
            Utils.checkNotNull(success, "success");
            this.success = success;
            return this;
        }
        
        public V3ValidateResponse build() {
            return new V3ValidateResponse(
                challengeMissing,
                next,
                success);
        }
    }
}

