/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.prove.proveapi.proveapi.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.prove.proveapi.proveapi.utils.LazySingletonValue;
import com.prove.proveapi.proveapi.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;


public class Individual {

    /**
     * Addresses that belong to the individual.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("addresses")
    private Optional<? extends java.util.List<AddressEntry>> addresses;

    /**
     * DOB is the date of birth of the individual.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dob")
    private Optional<? extends String> dob;

    /**
     * Email addresses that belong to the individual.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("emailAddresses")
    private Optional<? extends java.util.List<String>> emailAddresses;

    /**
     * First name of the individual.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("firstName")
    private Optional<? extends String> firstName;

    /**
     * Las name of the individual.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lastName")
    private Optional<? extends String> lastName;

    /**
     * SSN is the social security number of the individual.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ssn")
    private Optional<? extends String> ssn;

    @JsonCreator
    public Individual(
            @JsonProperty("addresses") Optional<? extends java.util.List<AddressEntry>> addresses,
            @JsonProperty("dob") Optional<? extends String> dob,
            @JsonProperty("emailAddresses") Optional<? extends java.util.List<String>> emailAddresses,
            @JsonProperty("firstName") Optional<? extends String> firstName,
            @JsonProperty("lastName") Optional<? extends String> lastName,
            @JsonProperty("ssn") Optional<? extends String> ssn) {
        Utils.checkNotNull(addresses, "addresses");
        Utils.checkNotNull(dob, "dob");
        Utils.checkNotNull(emailAddresses, "emailAddresses");
        Utils.checkNotNull(firstName, "firstName");
        Utils.checkNotNull(lastName, "lastName");
        Utils.checkNotNull(ssn, "ssn");
        this.addresses = addresses;
        this.dob = dob;
        this.emailAddresses = emailAddresses;
        this.firstName = firstName;
        this.lastName = lastName;
        this.ssn = ssn;
    }
    
    public Individual() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Addresses that belong to the individual.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<java.util.List<AddressEntry>> addresses() {
        return (Optional<java.util.List<AddressEntry>>) addresses;
    }

    /**
     * DOB is the date of birth of the individual.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> dob() {
        return (Optional<String>) dob;
    }

    /**
     * Email addresses that belong to the individual.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<java.util.List<String>> emailAddresses() {
        return (Optional<java.util.List<String>>) emailAddresses;
    }

    /**
     * First name of the individual.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> firstName() {
        return (Optional<String>) firstName;
    }

    /**
     * Las name of the individual.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> lastName() {
        return (Optional<String>) lastName;
    }

    /**
     * SSN is the social security number of the individual.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> ssn() {
        return (Optional<String>) ssn;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Addresses that belong to the individual.
     */
    public Individual withAddresses(java.util.List<AddressEntry> addresses) {
        Utils.checkNotNull(addresses, "addresses");
        this.addresses = Optional.ofNullable(addresses);
        return this;
    }

    /**
     * Addresses that belong to the individual.
     */
    public Individual withAddresses(Optional<? extends java.util.List<AddressEntry>> addresses) {
        Utils.checkNotNull(addresses, "addresses");
        this.addresses = addresses;
        return this;
    }

    /**
     * DOB is the date of birth of the individual.
     */
    public Individual withDob(String dob) {
        Utils.checkNotNull(dob, "dob");
        this.dob = Optional.ofNullable(dob);
        return this;
    }

    /**
     * DOB is the date of birth of the individual.
     */
    public Individual withDob(Optional<? extends String> dob) {
        Utils.checkNotNull(dob, "dob");
        this.dob = dob;
        return this;
    }

    /**
     * Email addresses that belong to the individual.
     */
    public Individual withEmailAddresses(java.util.List<String> emailAddresses) {
        Utils.checkNotNull(emailAddresses, "emailAddresses");
        this.emailAddresses = Optional.ofNullable(emailAddresses);
        return this;
    }

    /**
     * Email addresses that belong to the individual.
     */
    public Individual withEmailAddresses(Optional<? extends java.util.List<String>> emailAddresses) {
        Utils.checkNotNull(emailAddresses, "emailAddresses");
        this.emailAddresses = emailAddresses;
        return this;
    }

    /**
     * First name of the individual.
     */
    public Individual withFirstName(String firstName) {
        Utils.checkNotNull(firstName, "firstName");
        this.firstName = Optional.ofNullable(firstName);
        return this;
    }

    /**
     * First name of the individual.
     */
    public Individual withFirstName(Optional<? extends String> firstName) {
        Utils.checkNotNull(firstName, "firstName");
        this.firstName = firstName;
        return this;
    }

    /**
     * Las name of the individual.
     */
    public Individual withLastName(String lastName) {
        Utils.checkNotNull(lastName, "lastName");
        this.lastName = Optional.ofNullable(lastName);
        return this;
    }

    /**
     * Las name of the individual.
     */
    public Individual withLastName(Optional<? extends String> lastName) {
        Utils.checkNotNull(lastName, "lastName");
        this.lastName = lastName;
        return this;
    }

    /**
     * SSN is the social security number of the individual.
     */
    public Individual withSsn(String ssn) {
        Utils.checkNotNull(ssn, "ssn");
        this.ssn = Optional.ofNullable(ssn);
        return this;
    }

    /**
     * SSN is the social security number of the individual.
     */
    public Individual withSsn(Optional<? extends String> ssn) {
        Utils.checkNotNull(ssn, "ssn");
        this.ssn = ssn;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Individual other = (Individual) o;
        return 
            java.util.Objects.deepEquals(this.addresses, other.addresses) &&
            java.util.Objects.deepEquals(this.dob, other.dob) &&
            java.util.Objects.deepEquals(this.emailAddresses, other.emailAddresses) &&
            java.util.Objects.deepEquals(this.firstName, other.firstName) &&
            java.util.Objects.deepEquals(this.lastName, other.lastName) &&
            java.util.Objects.deepEquals(this.ssn, other.ssn);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            addresses,
            dob,
            emailAddresses,
            firstName,
            lastName,
            ssn);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Individual.class,
                "addresses", addresses,
                "dob", dob,
                "emailAddresses", emailAddresses,
                "firstName", firstName,
                "lastName", lastName,
                "ssn", ssn);
    }
    
    public final static class Builder {
 
        private Optional<? extends java.util.List<AddressEntry>> addresses = Optional.empty();
 
        private Optional<? extends String> dob;
 
        private Optional<? extends java.util.List<String>> emailAddresses = Optional.empty();
 
        private Optional<? extends String> firstName;
 
        private Optional<? extends String> lastName;
 
        private Optional<? extends String> ssn;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Addresses that belong to the individual.
         */
        public Builder addresses(java.util.List<AddressEntry> addresses) {
            Utils.checkNotNull(addresses, "addresses");
            this.addresses = Optional.ofNullable(addresses);
            return this;
        }

        /**
         * Addresses that belong to the individual.
         */
        public Builder addresses(Optional<? extends java.util.List<AddressEntry>> addresses) {
            Utils.checkNotNull(addresses, "addresses");
            this.addresses = addresses;
            return this;
        }

        /**
         * DOB is the date of birth of the individual.
         */
        public Builder dob(String dob) {
            Utils.checkNotNull(dob, "dob");
            this.dob = Optional.ofNullable(dob);
            return this;
        }

        /**
         * DOB is the date of birth of the individual.
         */
        public Builder dob(Optional<? extends String> dob) {
            Utils.checkNotNull(dob, "dob");
            this.dob = dob;
            return this;
        }

        /**
         * Email addresses that belong to the individual.
         */
        public Builder emailAddresses(java.util.List<String> emailAddresses) {
            Utils.checkNotNull(emailAddresses, "emailAddresses");
            this.emailAddresses = Optional.ofNullable(emailAddresses);
            return this;
        }

        /**
         * Email addresses that belong to the individual.
         */
        public Builder emailAddresses(Optional<? extends java.util.List<String>> emailAddresses) {
            Utils.checkNotNull(emailAddresses, "emailAddresses");
            this.emailAddresses = emailAddresses;
            return this;
        }

        /**
         * First name of the individual.
         */
        public Builder firstName(String firstName) {
            Utils.checkNotNull(firstName, "firstName");
            this.firstName = Optional.ofNullable(firstName);
            return this;
        }

        /**
         * First name of the individual.
         */
        public Builder firstName(Optional<? extends String> firstName) {
            Utils.checkNotNull(firstName, "firstName");
            this.firstName = firstName;
            return this;
        }

        /**
         * Las name of the individual.
         */
        public Builder lastName(String lastName) {
            Utils.checkNotNull(lastName, "lastName");
            this.lastName = Optional.ofNullable(lastName);
            return this;
        }

        /**
         * Las name of the individual.
         */
        public Builder lastName(Optional<? extends String> lastName) {
            Utils.checkNotNull(lastName, "lastName");
            this.lastName = lastName;
            return this;
        }

        /**
         * SSN is the social security number of the individual.
         */
        public Builder ssn(String ssn) {
            Utils.checkNotNull(ssn, "ssn");
            this.ssn = Optional.ofNullable(ssn);
            return this;
        }

        /**
         * SSN is the social security number of the individual.
         */
        public Builder ssn(Optional<? extends String> ssn) {
            Utils.checkNotNull(ssn, "ssn");
            this.ssn = ssn;
            return this;
        }
        
        public Individual build() {
            if (dob == null) {
                dob = _SINGLETON_VALUE_Dob.value();
            }
            if (firstName == null) {
                firstName = _SINGLETON_VALUE_FirstName.value();
            }
            if (lastName == null) {
                lastName = _SINGLETON_VALUE_LastName.value();
            }
            if (ssn == null) {
                ssn = _SINGLETON_VALUE_Ssn.value();
            }
            return new Individual(
                addresses,
                dob,
                emailAddresses,
                firstName,
                lastName,
                ssn);
        }

        private static final LazySingletonValue<Optional<? extends String>> _SINGLETON_VALUE_Dob =
                new LazySingletonValue<>(
                        "dob",
                        "\"2024-05-02 00:00:00 +0000 UTC\"",
                        new TypeReference<Optional<? extends String>>() {});

        private static final LazySingletonValue<Optional<? extends String>> _SINGLETON_VALUE_FirstName =
                new LazySingletonValue<>(
                        "firstName",
                        "\"Tod\"",
                        new TypeReference<Optional<? extends String>>() {});

        private static final LazySingletonValue<Optional<? extends String>> _SINGLETON_VALUE_LastName =
                new LazySingletonValue<>(
                        "lastName",
                        "\"Weedall\"",
                        new TypeReference<Optional<? extends String>>() {});

        private static final LazySingletonValue<Optional<? extends String>> _SINGLETON_VALUE_Ssn =
                new LazySingletonValue<>(
                        "ssn",
                        "\"265228370\"",
                        new TypeReference<Optional<? extends String>>() {});
    }
}

